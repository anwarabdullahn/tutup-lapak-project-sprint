definitions:
  dtos.EmailLoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dtos.EmailRegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dtos.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dtos.UserResponse'
    type: object
  dtos.PhoneLoginRequest:
    properties:
      password:
        maxLength: 32
        minLength: 8
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
    required:
    - password
    - phone
    type: object
  dtos.PhoneRegisterRequest:
    properties:
      password:
        maxLength: 32
        minLength: 8
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
    required:
    - password
    - phone
    type: object
  dtos.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for a tutup lapak application.
  title: TutupLapak API
  version: "1.0"
paths:
  /v1/login/email:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.EmailLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Login with email
      tags:
      - auth
  /v1/login/phone:
    post:
      consumes:
      - application/json
      description: Login user with phone and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.PhoneLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Login with phone
      tags:
      - auth
  /v1/register/email:
    post:
      consumes:
      - application/json
      description: Register new user with email
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.EmailRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register with email
      tags:
      - auth
  /v1/register/phone:
    post:
      consumes:
      - application/json
      description: Register new user with phone
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.PhoneRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register with phone
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
